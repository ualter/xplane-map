<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>br.ujr.xplane.map</groupId>
	<artifactId>xplane-map</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>
	<name>xplane-map</name>
	<url>http://maven.apache.org</url>
	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	</properties>
	
	<dependencies>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>3.8.1</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.googlecode.json-simple</groupId>
			<artifactId>json-simple</artifactId>
			<version>1.1.1</version>
		</dependency>
		<dependency>
			<groupId>com.sun.net.httpserver</groupId>
			<artifactId>http</artifactId>
			<version>20070405</version>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>1.1.2</version>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>3.4</version>
		</dependency>
		<dependency>
			<groupId>org.codehaus.jackson</groupId>
			<artifactId>jackson-mapper-asl</artifactId>
			<version>1.8.5</version>
		</dependency>
	</dependencies>
</project>

<!--   *********************************************** DaemonThreads
package br.ujr.xplane.comm;

public abstract class DaemonThreads extends Thread {
	
	protected boolean runState = true;
	
	public DaemonThreads() {
		this.setDaemon(true);
	}

	public boolean isRunState() {
		return runState;
	}

	public void setRunState(boolean runState) {
		this.runState = runState;
	}
	

}
-->

<!--   *********************************************** UDPSender
package br.ujr.xplane.comm;

import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketException;
import java.net.UnknownHostException;
import java.nio.ByteBuffer;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.BlockingQueue;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import br.ujr.xplane.comm.message.DATAMessage;

public class UDPSender extends DaemonThreads {

	public static Logger				logger	= LoggerFactory.getLogger(UDPSender.class);

	private DatagramSocket				datagramSocket;
	private int							port;
	private String						ipAddress;
	private BlockingQueue<DATAMessage>	messageQueue;

	public UDPSender(String ipAddress, int port) throws SocketException, UnknownHostException {
		super();
		this.port = port;
		this.ipAddress = ipAddress;
		datagramSocket = new DatagramSocket();
		messageQueue = new ArrayBlockingQueue<DATAMessage>(5000, true);
	}

	public void sendDATAMessage(DATAMessage message) {
		send(message.toByteBuffer());
	}

	public void send(ByteBuffer bb) {
		send(bb.array());
	}

	public void send(byte[] buffer) {
		try {
			datagramSocket.send(new DatagramPacket(buffer, buffer.length, InetAddress.getByName(ipAddress), port));
		} catch (UnknownHostException e) {
			logger.error(e.getMessage(), e);
			throw new RuntimeException(e);
		} catch (IOException e) {
			logger.error(e.getMessage(), e);
			throw new RuntimeException(e);
		}
	}

	public void run() {
		while (this.runState) {
			if (messageQueue.size() > 0) {

				int bufferSize = messageQueue.size() * 36 + 5;
				if (bufferSize > 41) {
					bufferSize = 41;
				}
				ByteBuffer byteBuffer = ByteBuffer.allocate(bufferSize);
				DATAMessage m = messageQueue.poll();
				byteBuffer.put(m.toByteBuffer().array());
				send(byteBuffer);
				try {
					sleep(100);
				} catch (InterruptedException e) {
					logger.warn(e.getMessage(), e);
				}
			}
		}
	}

	public int getPort() {
		return port;
	}

	public void setPort(int port) {
		this.port = port;
	}

	public String getIpAddress() {
		return ipAddress;
	}

	public void setIpAddress(String ipAddress) {
		this.ipAddress = ipAddress;
	}

	public BlockingQueue<DATAMessage> getMessageQueue() {
		return messageQueue;
	}

	public void setMessageQueue(BlockingQueue<DATAMessage> messageQueue) {
		this.messageQueue = messageQueue;
	}
}

-->

<!--  *********************************************** DATAMessage
package br.ujr.xplane.comm.message;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

public class DATAMessage extends UDPMessage {
	
	private int index;
	private float[] txData;
	private float[] rxData;
	
	public DATAMessage() {
		setProlouge("DATA0");
		txData = new float[8];
		rxData = new float[8];
		clear();
	}
	
	public void clear() {
		for (int i = 0; i < txData.length; i++) {
			txData[i] = -999;
		}
	}
	
	@Override
	public ByteBuffer toByteBuffer() {
        ByteBuffer byteBuffer = ByteBuffer.allocate(getProlouge().length() + 4 + (txData.length * 4));
    	String prolougue = getProlouge();
    	
    	byteBuffer.put(prolougue.getBytes());
    	byteBuffer.order(ByteOrder.LITTLE_ENDIAN);
    	byteBuffer.putInt(index);
    	
    	for (int i = 0; i < txData.length; i++) {
    		byteBuffer.putFloat(txData[i]);
    	}
    	return byteBuffer;
	}
	
	@Override
	public ByteBuffer toByteBufferWithoutPrologue() {
        ByteBuffer byteBuffer = ByteBuffer.allocate(4 + txData.length * 4);

    	byteBuffer.order(ByteOrder.LITTLE_ENDIAN);
    	byteBuffer.putInt(index);
    	
    	for (int i = 0; i < txData.length; i++) {
    		byteBuffer.putFloat(txData[i]);
    	}
    	return byteBuffer;
	}

	
	/*public String toString() {
		String s = index + " - ";
		return s;
	}*/
	
	public int getIndex() {
		return index;
	}

	public void setIndex(int index) {
		this.index = index;
	}

	public float[] getTxData() {
		return txData;
	}

	public void setTxData(float[] tXData) {
		txData = tXData;
	}

	public float[] getRxData() {
		return rxData;
	}

	public void setRxData(float[] rXData) {
		rxData = rXData;
	}
}
-->

<!--   *********************************************** UDPMessage
package br.ujr.xplane.comm.message;

import java.nio.ByteBuffer;

public abstract class UDPMessage {
	
	private String prolouge;

	public String getProlouge() {
		return prolouge;
	}

	public void setProlouge(String prolouge) {
		this.prolouge = prolouge;
	}

	public abstract ByteBuffer toByteBuffer();
	
	public abstract ByteBuffer toByteBufferWithoutPrologue();
	
}
-->

<!--   *********************************************** DSELMessage
package br.ujr.xplane.comm.message;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

public class DSELMessage extends UDPMessage {
	
	private int[] data;
	
	public DSELMessage() {
		setProlouge("DSEL0");
	}
	
	public DSELMessage(int[] data) {
		this();
		this.data = data;
	}

	public DSELMessage(String data) {
		this();
		String aux[] = data.split(",");
		this.data = new int[aux.length];
		for (int i = 0; i < aux.length; i++) {
			this.data[i] = Integer.parseInt(aux[i]);
		}
	}
	
	@Override
	public ByteBuffer toByteBuffer() {
        ByteBuffer byteBuffer = ByteBuffer.allocate(5 + (data.length  * 4));
        
    	String prolougue = getProlouge();
    	byteBuffer.put(prolougue.getBytes());
    	byteBuffer.order(ByteOrder.LITTLE_ENDIAN);
    	
    	for (int i = 0; i < data.length; i++) {
    		byteBuffer.putInt(data[i]);
    	}
    	return byteBuffer;
	}

	public ByteBuffer toByteBufferWithoutPrologue() {
		return null;
	}
}

-->

<!--   *********************************************** USELMessages
package br.ujr.xplane.comm.message;


import java.nio.ByteBuffer;
import java.nio.ByteOrder;

public class USELMessage extends UDPMessage {
	
	private int[] data;
	
	public USELMessage() {
		setProlouge("USEL0");
	}
	
	public USELMessage(int[] data) {
		this();
		this.data = data;
	}

	public USELMessage(String data) {
		this();
		String aux[] = data.split(",");
		this.data = new int[aux.length];
		for (int i = 0; i < aux.length; i++) {
			this.data[i] = Integer.parseInt(aux[i]);
		}
	}
	
	@Override
	public ByteBuffer toByteBuffer() {
        ByteBuffer byteBuffer = ByteBuffer.allocate(5 + (data.length*4));
    	String prolougue = getProlouge();
    	byteBuffer.put(prolougue.getBytes());
    	byteBuffer.order(ByteOrder.LITTLE_ENDIAN);
    	for (int i = 0; i < data.length; i++) {
    		byteBuffer.putInt(data[i]);
    	}
    	return byteBuffer;
	}

	@Override
	public ByteBuffer toByteBufferWithoutPrologue() {
		return null;
	}
}
-->

<!-- *********************************************** PAUSMessage
package br.ujr.xplane.comm.message;

import java.nio.ByteBuffer;

public class PAUSMessage extends UDPMessage {
	
	private char data;
	
	public PAUSMessage() {
		setProlouge("PAUS0");
	}
	
	@Override
	public ByteBuffer toByteBuffer() {
        ByteBuffer byteBuffer = ByteBuffer.allocate(5);
    	String prolougue = getProlouge();
    	byteBuffer.put(prolougue.getBytes());
    	return byteBuffer;
	}

	@Override
	public ByteBuffer toByteBufferWithoutPrologue() {
		return null;
	}

	public char getData() {
		return data;
	}

	public void setData(char data) {
		this.data = data;
	}

}
-->

<!-- *********************************************** DATAREFMessage
package br.ujr.xplane.comm.message;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

public class DATAREFMessage extends UDPMessage {
	
	private float value;
	private String dataRef;
	
	public DATAREFMessage(String dataRef, float value) {
		setProlouge("DREF0");
		this.dataRef = dataRef;
		this.value = value;
	}
	
	@Override
	public ByteBuffer toByteBuffer() {
        ByteBuffer byteBuffer = ByteBuffer.allocate(getProlouge().length() + 4 + 500);

    	String prolougue = getProlouge();
    	
    	byteBuffer.put(prolougue.getBytes());
    	byteBuffer.order(ByteOrder.LITTLE_ENDIAN);
    	byteBuffer.putFloat(value);
    	byteBuffer.put(dataRef.getBytes());
    	
    	return byteBuffer;
	}
	
	@Override
	public ByteBuffer toByteBufferWithoutPrologue() {
        ByteBuffer byteBuffer = ByteBuffer.allocate(4 + 1);
    	return byteBuffer;
	}
}
-->

<!-- *********************************************** CHARMessage
package br.ujr.xplane.comm.message;

import java.nio.ByteBuffer;

public class CHARMessage extends UDPMessage {
	
	private char key;
	
	public CHARMessage(char key) {
		setProlouge("CHAR0");
		this.key = key;
	}
	
	@Override
	public ByteBuffer toByteBuffer() {
        ByteBuffer byteBuffer = ByteBuffer.allocate(5 + 2);
    	String prol = getProlouge();
    	byteBuffer.put(prol.getBytes());
    	byteBuffer.put((byte)key);
    	return byteBuffer;
	}

	@Override
	public ByteBuffer toByteBufferWithoutPrologue() {
		return null;
	}
}
-->

